{"version":3,"sources":["components/Statistics/index.js","components/FeedbackOptions/index.js","components/Section/index.js","components/Notification/index.js","components/Feedback/index.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","good","neutral","bad","total","positiveFeedback","FeedbackOptions","options","onLeaveFeedback","map","option","name","key","onClick","Section","title","children","Notification","message","Feedback","state","handleClick","e","preventDefault","target","setState","countTotalFeedback","this","countPositiveFeedbackPercentage","toFixed","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6QAceA,EAZI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC/C,OACE,4BACE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,OCWSC,EAjBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,4BAAQC,KAAMD,EAAOC,KAAMC,IAAKF,EAAOE,IAAKC,QAASL,GAClDE,EAAOC,WCSHG,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,4BAAKD,GACJC,ICIQC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAKA,ICEOC,E,4MACnBC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,iBAAkB,G,EAGpBgB,YAAc,SAACC,GACbA,EAAEC,iBADiB,IAEXZ,EAASW,EAAEE,OAAXb,KACR,EAAKc,SAAL,eAAiBd,EAAO,EAAKS,MAAMT,GAAQ,GAAK,EAAKe,qB,mEAGjC,IAAD,EACYC,KAAKP,MAC9BhB,EAFa,EACXH,KADW,EACLC,QADK,EACIC,IAGvBwB,KAAKF,SAAS,CAAErB,MAAOA,GAASuB,KAAKC,mC,wDAGJ,IAAD,EACRD,KAAKP,MAArBnB,EADwB,EACxBA,KAAMG,EADkB,EAClBA,MACduB,KAAKF,SAAS,CAAEpB,kBAAoBJ,EAAOG,EAAS,KAAKyB,QAAQ,O,+BAmBjE,OACE,yBAAKC,UAAU,YACb,kBAAC,EAAD,CAASf,MAAM,8BACb,kBAAC,EAAD,CACER,QAnBQ,CACd,CACEI,KAAM,OACNC,IAAK,GAEP,CACED,KAAM,UACNC,IAAK,GAEP,CACED,KAAM,MACNC,IAAK,IASDJ,gBAAiBmB,KAAKN,eAG1B,yBAAKS,UAAU,cACb,kBAAC,EAAD,CAASf,MAAM,cACZY,KAAKP,MAAMhB,MAAQ,EAClB,kBAAC,EAAD,CACEH,KAAM0B,KAAKP,MAAMnB,KACjBC,QAASyB,KAAKP,MAAMlB,QACpBC,IAAKwB,KAAKP,MAAMjB,IAChBC,MAAOuB,KAAKP,MAAMhB,MAClBC,iBAAkBsB,KAAKP,MAAMf,mBAG/B,kBAAC,EAAD,CAAca,QAAQ,6B,GA9DEa,IAAMC,W,MCM7BC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,a","file":"static/js/main.93a49922.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positiveFeedback}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map((option) => (\r\n        <button name={option.name} key={option.key} onClick={onLeaveFeedback}>\r\n          {option.name}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.object),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <h3>{message}</h3>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport Statistics from \"../Statistics\";\r\nimport FeedbackOptions from \"../FeedbackOptions\";\r\nimport Section from \"../Section\";\r\nimport Notification from \"../Notification\";\r\n\r\nexport default class Feedback extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    positiveFeedback: 0,\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    const { name } = e.target;\r\n    this.setState({ [name]: this.state[name] + 1 }, this.countTotalFeedback);\r\n  };\r\n\r\n  countTotalFeedback() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = good + neutral + bad;\r\n\r\n    this.setState({ total: total }, this.countPositiveFeedbackPercentage);\r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    const { good, total } = this.state;\r\n    this.setState({ positiveFeedback: ((good / total) * 100).toFixed(0) });\r\n  }\r\n\r\n  render() {\r\n    const options = [\r\n      {\r\n        name: \"good\",\r\n        key: 0,\r\n      },\r\n      {\r\n        name: \"neutral\",\r\n        key: 1,\r\n      },\r\n      {\r\n        name: \"bad\",\r\n        key: 2,\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <div className=\"feedback\">\r\n        <Section title=\"Please leave your feedback\">\r\n          <FeedbackOptions\r\n            options={options}\r\n            onLeaveFeedback={this.handleClick}\r\n          />\r\n        </Section>\r\n        <div className=\"statistics\">\r\n          <Section title=\"Statistics\">\r\n            {this.state.total > 0 ? (\r\n              <Statistics\r\n                good={this.state.good}\r\n                neutral={this.state.neutral}\r\n                bad={this.state.bad}\r\n                total={this.state.total}\r\n                positiveFeedback={this.state.positiveFeedback}\r\n              />\r\n            ) : (\r\n              <Notification message=\"No feedback given\"></Notification>\r\n            )}\r\n          </Section>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport Feedback from \"./components/Feedback\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}